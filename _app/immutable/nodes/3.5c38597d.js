import{s as x,h as w}from"../chunks/scheduler.858dac91.js";import{S as g,i as y,g as p,r as C,h as d,j as I,u as b,l as _,a as r,v as H,d as j,t as z,f as c,w as L,s as v,x as u,c as $}from"../chunks/index.258ec88e.js";import{N as M}from"../chunks/Notes.4dc21547.js";function T(h){let e,s="about",a,t,o=`<h3>why?</h3> <p>A friend pointed out these puzzles to me and wanted to make a solver for practice.
            I became interested, because when I solved them by hand, I approached them in a very disorganized way, and so I was wondering how a computer might do it.</p>`,i,l,f="Made by B-42.";return{c(){e=p("h1"),e.textContent=s,a=v(),t=p("article"),t.innerHTML=o,i=v(),l=p("h3"),l.textContent=f},l(n){e=d(n,"H1",{"data-svelte-h":!0}),u(e)!=="svelte-t7i5gh"&&(e.textContent=s),a=$(n),t=d(n,"ARTICLE",{"data-svelte-h":!0}),u(t)!=="svelte-900jgj"&&(t.innerHTML=o),i=$(n),l=d(n,"H3",{"data-svelte-h":!0}),u(l)!=="svelte-nnhplt"&&(l.textContent=f)},m(n,m){r(n,e,m),r(n,a,m),r(n,t,m),r(n,i,m),r(n,l,m)},p:w,d(n){n&&(c(e),c(a),c(t),c(i),c(l))}}}function A(h){let e,s,a;return e=new M({props:{$$slots:{default:[T]},$$scope:{ctx:h}}}),{c(){s=p("div"),C(e.$$.fragment),this.h()},l(t){s=d(t,"DIV",{style:!0});var o=I(s);b(e.$$.fragment,o),this.h()},h(){_(s,"display","contents"),_(s,"--width","350px")},m(t,o){r(t,s,o),H(e,s,null),a=!0},p(t,[o]){const i={};o&1&&(i.$$scope={dirty:o,ctx:t}),e.$set(i)},i(t){a||(j(e.$$.fragment,t),a=!0)},o(t){z(e.$$.fragment,t),a=!1},d(t){t&&e&&c(s),L(e,t)}}}class q extends g{constructor(e){super(),y(this,e,null,A,x,{})}}export{q as component};
